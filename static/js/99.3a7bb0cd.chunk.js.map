{"version":3,"file":"static/js/99.3a7bb0cd.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatus/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://my-app/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://my-app/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","webpack://my-app/./src/components/Profile/MyPosts/AddNewPostForm/AddNewPostForm.module.css?bb6c","components/Profile/MyPosts/AddNewPostForm/AddNewPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__Km9Pv\",\"background\":\"ProfileInfo_background__VSROu\",\"avatar\":\"ProfileInfo_avatar__FwlfK\",\"infoWrapper\":\"ProfileInfo_infoWrapper__Mxymq\",\"myName\":\"ProfileInfo_myName__R+u3T\"};","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './ProfileStatus.module.css';\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [status, setStatus] = useState(props.status);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    };\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value);\r\n    };\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status)\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateEditMode}>{props.status || '----'}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input\r\n                    onChange={onStatusChange}\r\n                    value={status}\r\n                    autoFocus={true}\r\n                    onBlur={deactivateEditMode}\r\n                />\r\n            </div>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;","import React, {FC} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport {ProfileType} from '../../../redux/profileReducer';\r\nimport avatar from '../../../icons/avatar.jpg';\r\nimport ProfileStatusWithHooks from './ProfileStatus/ProfileStatusWithHooks';\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileInfo: FC<ProfileInfoPropsType> = (\r\n    {\r\n        profile,\r\n        status,\r\n        updateStatus\r\n    }) => {\r\n    if (!profile) {\r\n        return <Preloader/>;\r\n    }\r\n    return (\r\n        <div>\r\n            <img className={s.background}\r\n                 src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/7/7d/PanoHardangerfjorden1.jpg/680px-PanoHardangerfjorden1.jpg\"\r\n                 alt=\"background\"/>\r\n            <div className={s.descriptionBlock}>\r\n                <div className={s.avatar}>\r\n                    <img src={profile.photos.large || avatar} alt=\"ava\"/>\r\n                    <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n                </div>\r\n                <div className={s.infoWrapper}>\r\n                    <div className={s.myName}>Saveliy Biryukov</div>\r\n                    <div>Date of Birth: 29.09.1999</div>\r\n                    <div>City: Minsk</div>\r\n                    <div>Education: BSUIR</div>\r\n                    <div>Web Site: none</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileInfo;\r\n//src=\"https://download-cs.net/steam/avatars/3405.jpg\"","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__PaRBw\",\"header\":\"MyPosts_header__CXMsP\",\"newPosts\":\"MyPosts_newPosts__P2mbH\",\"textareaWrapper\":\"MyPosts_textareaWrapper__3zjb6\",\"buttonWrapper\":\"MyPosts_buttonWrapper__OeJI4\",\"posts\":\"MyPosts_posts__eatUY\"};","// extracted by mini-css-extract-plugin\nexport default {\"posts\":\"Post_posts__1TnEM\",\"item\":\"Post_item__fUkod\",\"textMessage\":\"Post_textMessage__DC5zi\",\"likes\":\"Post_likes__LUuJM\",\"buttonWrapper\":\"Post_buttonWrapper__cPAEv\"};","import React from 'react';\r\nimport s from './Post.module.css'\r\nimport {PostType} from \"../../../../redux/profileReducer\";\r\n\r\ntype PostPropsType = PostType\r\n\r\nconst Post = (props: PostPropsType) => {\r\n    return (\r\n        <div className={s.posts}>\r\n            <div className={s.item}>\r\n                <img src=\"https://download-cs.net/steam/avatars/3405.jpg\" alt=\"avatar\"/>\r\n            </div>\r\n            <div className={s.textMessage}>{props.message}</div>\r\n            <div className={s.likes}>\r\n                <div className={s.buttonWrapper}>\r\n                    <button>Like</button>\r\n                </div>\r\n                <div>{props.likes}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Post;","// extracted by mini-css-extract-plugin\nexport default {\"textareaWrapper\":\"AddNewPostForm_textareaWrapper__-YKtF\",\"errorMessage\":\"AddNewPostForm_errorMessage__yHGJj\",\"buttonWrapper\":\"AddNewPostForm_buttonWrapper__rbYNc\"};","import React from 'react';\r\nimport {ErrorMessage, Field, Form, Formik} from \"formik\";\r\nimport s from './AddNewPostForm.module.css'\r\n\r\ninterface Values {\r\n    newPostElement: string;\r\n}\r\n\r\ntype AddNewPostFormPropsType = {\r\n    onAddPost: (message: string) => void\r\n}\r\n\r\nexport const AddNewPostForm: React.FC<AddNewPostFormPropsType> = (props) => {\r\n    const initialValues = {newPostElement: ''}\r\n    const submit = (values: Values, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) =>\r\n    {\r\n        props.onAddPost(values.newPostElement)\r\n        values.newPostElement = ''\r\n        setSubmitting(false);\r\n    }\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                validate={values => {\r\n                    const errors = {} as {newPostElement: string};\r\n                    if (!values.newPostElement) {\r\n                        errors.newPostElement = 'your message is empty';\r\n                    }\r\n                    return errors;\r\n                }}\r\n                onSubmit={submit}\r\n            >\r\n\r\n                {({isValid}) => (\r\n                <Form>\r\n                    <div className={s.textareaWrapper}>\r\n                    <Field\r\n                        placeholder=\"your news...\"\r\n                        component={\"textarea\"} type=\"newPostElement\" name=\"newPostElement\"/>\r\n                    </div>\r\n                    <ErrorMessage className={s.errorMessage} name=\"newPostElement\" component=\"div\"/>\r\n                    <div  className={s.buttonWrapper}>\r\n                    <button disabled={!isValid} type=\"submit\">Add post</button>\r\n                    </div>\r\n                </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    );\r\n};","import React, {FC} from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {PostType} from '../../../redux/profileReducer';\r\nimport {AddNewPostForm} from './AddNewPostForm/AddNewPostForm';\r\n\r\ntype MyPostsPropsType = {\r\n    posts: Array<PostType>\r\n    addPost: (message: string) => void\r\n}\r\n\r\nconst MyPosts: FC<MyPostsPropsType> = React.memo((\r\n    {\r\n        posts,\r\n        addPost,\r\n    }) => {\r\n\r\n    const postsElements = posts.map((m: PostType) =>\r\n        <Post key={m.id} id={m.id} message={m.message} likes={m.likes}/>\r\n    );\r\n\r\n    const onAddPost = (message: string) => {\r\n        addPost(message);\r\n    };\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <div className={s.newPosts}>\r\n                <div className={s.header}>\r\n                    My posts\r\n                </div>\r\n                <AddNewPostForm onAddPost={onAddPost}/>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPost, ProfilePageType} from '../../../redux/profileReducer';\r\nimport MyPosts from './MyPosts';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../../redux/reduxStore';\r\nimport {Dispatch} from 'redux';\r\n\r\ntype MapStatePropsType = {\r\n    profilePage: ProfilePageType\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addPost: (message: string) => void\r\n}\r\n\r\nexport type MyPostsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addPost: (message: string) => {\r\n            dispatch(addPost(message))\r\n        }\r\n    }\r\n}\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\nexport default MyPostsContainer;","import React, {FC} from 'react';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport {ProfilePropsType} from './ProfileContainer';\r\n\r\nconst Profile: FC<ProfilePropsType> = (\r\n    {\r\n        profile,\r\n        status,\r\n        updateStatus,\r\n    }) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={profile} status={status} updateStatus={updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;","import React, {ComponentType} from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport {getUserProfile, getStatus, updateStatus} from \"../../redux/profileReducer\";\r\nimport {PathMatch, useMatch, useParams} from \"react-router-dom\";\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport {compose} from \"redux\";\r\n\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n}\r\nexport type ProfilePropsType = MapStatePropsType & MapDispatchPropsType & {\r\n    //params: Readonly<Params>\r\n    match: PathMatch<\"userId\"> | null\r\n}\r\n\r\nclass ProfileContainer extends React.Component<ProfilePropsType, {}> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match?.params.userId\r\n        if (!userId) {\r\n            userId = '6818'\r\n            /*userId = this.props.authorizedUserId\r\n            if(!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }*/\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile {...this.props} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport const withRouter = (ProfileContainer: typeof React.Component) => {\r\n    return (props: object) => {\r\n        const params = useParams() // не подходит, потому что нужно видеть свой профиль при пустом адресе\r\n        //useParams возвращает объект пары key/value (ключ/значение) параметров URL.\r\n        const match = useMatch('/profile/:userId/');\r\n        return (\r\n            <ProfileContainer {...props} params={params} match={match}/>\r\n        );\r\n    }\r\n}\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\r\n    withRouter,\r\n    withAuthRedirect,\r\n)(ProfileContainer)\r\n","import {Navigate} from \"react-router-dom\";\r\nimport React, {ComponentType} from \"react\";\r\nimport {AppStateType} from \"../redux/reduxStore\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype mapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStatePropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: mapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Navigate to=\"/login\"/>\r\n            return <Component {...restProps as T}/>\r\n    }\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}\r\n"],"names":["props","useState","editMode","setEditMode","status","setStatus","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","profile","className","s","src","alt","photos","large","avatar","Preloader","message","likes","AddNewPostForm","initialValues","newPostElement","validate","values","errors","onSubmit","setSubmitting","onAddPost","isValid","placeholder","component","type","name","disabled","React","posts","addPost","postsElements","map","m","id","connect","state","profilePage","dispatch","MyPosts","ProfileContainer","userId","this","match","params","getUserProfile","getStatus","withRouter","useParams","useMatch","compose","authorizedUserId","auth","isAuth","withAuthRedirect","mapStateToProps","Component","restProps","to"],"sourceRoot":""}