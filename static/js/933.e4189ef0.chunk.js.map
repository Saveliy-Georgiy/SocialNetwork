{"version":3,"file":"static/js/933.e4189ef0.chunk.js","mappings":"0KACA,G,QAA0B,0BAA1B,EAAkE,8BAAlE,EAA2G,0BCA3G,EAA0B,6BAA1B,EAAgE,4BAAhE,EAAqG,4B,mBCiBrG,EAXoB,SAACA,GAEjB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OACI,gBAAKC,UAAWC,EAAhB,UACI,SAAC,KAAD,CAASC,GAAIJ,EAAME,UAAWC,EAAW,IAAMA,EAA/C,SAA0DJ,EAAMM,UCZ5E,EAA0B,yBCW1B,EANgB,SAACN,GACb,OACI,gBAAKG,UAAWC,EAAhB,SAA4BJ,EAAMO,W,oBCG7BC,EAAoD,SAACR,GAQ9D,OACI,0BACI,SAAC,KAAD,CACIS,cAVU,CAACC,eAAgB,IAW3BC,SAVG,SAACC,EAAD,GACd,IADgCC,EACjC,EADiCA,cAE7Bb,EAAMc,YAAYF,EAAOF,gBACzBE,EAAOF,eAAiB,GACxBG,GAAc,IAIV,UAII,UAAC,KAAD,YACI,SAAC,KAAD,CACIE,YAAa,qBACbC,UAAW,WAAYC,KAAK,iBAAiBX,KAAK,oBACtD,mBAAQW,KAAK,SAAb,0BCUpB,EA9BgB,SAACjB,GAEb,IAAMkB,EAAclB,EAAMmB,YAAYC,QAAQC,KAAI,SAACC,GAAD,OAC9C,SAAC,EAAD,CAAwBpB,GAAIoB,EAAEpB,GAAII,KAAMgB,EAAEhB,MAAxBgB,EAAEpB,OAGlBqB,EAAevB,EAAMmB,YAAYK,SAASH,KAAI,SAACI,GAAD,OAChD,SAAC,EAAD,CAAoBvB,GAAIuB,EAAEvB,GAAIK,QAASkB,EAAElB,SAA3BkB,EAAEvB,OAOpB,OAAKF,EAAM0B,QAGP,iBAAKvB,UAAWC,EAAhB,WACI,iBAAKD,UAAWC,EAAhB,WACI,qCACCc,MAEL,gBAAKf,UAAWC,EAAhB,SACKmB,KAEL,SAACf,EAAD,CAAgBM,YAfG,SAACP,GACxBP,EAAMc,YAAYP,UAGI,SAAC,KAAD,CAAUF,GAAG,Y,oBCW3C,GAAesB,EAAAA,EAAAA,IACXC,EAAAA,GACAC,EAAAA,EAAAA,KAjBoB,SAACC,GACrB,MAAO,CACHX,YAAaW,EAAMX,YACnBO,OAAQI,EAAMC,KAAKL,WAIA,SAACM,GACxB,MAAO,CACHlB,YAAa,SAACP,GACVyB,GAASlB,EAAAA,EAAAA,IAAYP,SAKjC,CAGE0B,I,iIC5BIC,EAAkB,SAACJ,GAAD,MAA6C,CACjEJ,OAAQI,EAAMC,KAAKL,SAGhB,SAASE,EAAoBO,GAMhC,OAAON,EAAAA,EAAAA,IAAQK,EAARL,EALmB,SAAC7B,GACvB,IAAK0B,EAAwB1B,EAAxB0B,OAAWU,GAAhB,OAA6BpC,EAA7B,GACA,OAAK0B,GACM,SAACS,GAAD,UAAeC,KADN,SAAC,KAAD,CAAU/B,GAAG","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://my-app/./src/components/Dialogs/DialogsItem/DialogsItem.module.css?e982","components/Dialogs/DialogsItem/DialogsItem.tsx","webpack://my-app/./src/components/Dialogs/Message/Message.module.css?72d0","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__2jlhk\",\"dialogsItems\":\"Dialogs_dialogsItems__qJuCR\",\"messages\":\"Dialogs_messages__bQ9OI\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"DialogsItem_dialogs__f-jgS\",\"dialog\":\"DialogsItem_dialog__DCljR\",\"active\":\"DialogsItem_active__6z0Q6\"};","import React from 'react';\r\nimport s from './DialogsItem.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {DialogsItemType} from \"../../../redux/dialogsReducer\";\r\n\r\ntype DialogsItemPropsType = DialogsItemType\r\n\r\nconst DialogsItem = (props: DialogsItemPropsType) => {\r\n\r\n    let path = \"/dialogs/\" + props.id\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <NavLink to={path} className={s.dialog + ' ' + s.active}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogsItem;","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__s0dHY\"};","import React from 'react';\r\nimport s from './Message.module.css';\r\nimport {MessageType} from \"../../../redux/dialogsReducer\";\r\n\r\ntype MessagePropsType = MessageType\r\n\r\nconst Message = (props: MessagePropsType) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    );\r\n};\r\n\r\nexport default Message;","import React from 'react';\r\nimport {Field, Form, Formik} from \"formik\";\r\n\r\ninterface Values {\r\n    newMessageBody: string;\r\n}\r\n\r\ntype AddMessageFormPropsType = {\r\n    sendMessage: (message: string) => void\r\n}\r\n\r\nexport const AddMessageForm: React.FC<AddMessageFormPropsType> = (props) => {\r\n    const initialValues = {newMessageBody: ''}\r\n    const submit = (values: Values, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) =>\r\n    {\r\n        props.sendMessage(values.newMessageBody)\r\n        values.newMessageBody = ''\r\n        setSubmitting(false);\r\n    }\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={submit}\r\n            >\r\n                <Form>\r\n                    <Field\r\n                        placeholder={\"Enter your message\"}\r\n                        component={\"textarea\"} type=\"newMessageBody\" name=\"newMessageBody\"/>\r\n                    <button type=\"submit\">Send</button>\r\n                </Form>\r\n            </Formik>\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogsItem from \"./DialogsItem/DialogsItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport {DialogsItemType, MessageType} from \"../../redux/dialogsReducer\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {AddMessageForm} from \"./AddMessageForm/AddMessageForm\";\r\n\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n\r\n    const dialogsItem = props.dialogsPage.dialogs.map((d: DialogsItemType) =>\r\n        <DialogsItem key={d.id} id={d.id} name={d.name}/>\r\n    )\r\n\r\n    const messagesItem = props.dialogsPage.messages.map((m: MessageType) =>\r\n        <Message key={m.id} id={m.id} message={m.message}/>\r\n    )\r\n\r\n    const onSendMessageClick = (message: string) => {\r\n        props.sendMessage(message)\r\n    }\r\n\r\n    if (!props.isAuth) return <Navigate to=\"/login\"/>\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                <div>DIALOGS</div>\r\n                {dialogsItem}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messagesItem}\r\n            </div>\r\n            <AddMessageForm sendMessage={onSendMessageClick}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dialogs;","import React, {ComponentType} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {DialogPageType, sendMessage} from \"../../redux/dialogsReducer\";\r\nimport Dialogs from './Dialogs';\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\ntype MapStatePropsType = {\r\n    dialogsPage: DialogPageType\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    sendMessage: (message: string) => void\r\n}\r\n\r\nexport type DialogsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        sendMessage: (message: string) => {\r\n            dispatch(sendMessage(message))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n)(Dialogs)\r\n\r\n","import {Navigate} from \"react-router-dom\";\r\nimport React, {ComponentType} from \"react\";\r\nimport {AppStateType} from \"../redux/reduxStore\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype mapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStatePropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: mapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Navigate to=\"/login\"/>\r\n            return <Component {...restProps as T}/>\r\n    }\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}\r\n"],"names":["props","path","id","className","s","to","name","message","AddMessageForm","initialValues","newMessageBody","onSubmit","values","setSubmitting","sendMessage","placeholder","component","type","dialogsItem","dialogsPage","dialogs","map","d","messagesItem","messages","m","isAuth","compose","withAuthRedirect","connect","state","auth","dispatch","Dialogs","mapStateToProps","Component","restProps"],"sourceRoot":""}